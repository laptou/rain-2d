<Window x:Class="Rain.View.MainView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:control="clr-namespace:Rain.View.Control" xmlns:core="clr-namespace:Rain.Core;assembly=Rain.Core"
        xmlns:coremodel="clr-namespace:Rain.Core.Model;assembly=Rain.Core"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:documentGraph="clr-namespace:Rain.Core.Model.DocumentGraph;assembly=Rain.Core"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:utility="clr-namespace:Rain.View.Utility"
        xmlns:viewmodel="clr-namespace:Rain.ViewModel"
        Title="Rain Animator 2D"
        d:DesignHeight="1080" d:DesignWidth="1920" Icon="/Rain;component/Resources/logo.png"
        WindowState="Maximized"
        mc:Ignorable="d">
    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="30" CornerRadius="5" ResizeBorderThickness="5"
                      UseAeroCaptionButtons="False" />
    </WindowChrome.WindowChrome>
    <utility:Helper.InputBindingSource>
        <Binding Path="Shortcuts" />
    </utility:Helper.InputBindingSource>
    <Window.Style>
        <Style TargetType="{x:Type Window}">
            <Style.Triggers>
                <Trigger Property="WindowState" Value="Maximized">
                    <Setter Property="BorderThickness" Value="7" />
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Style>
    <d:Window.DataContext>
        <viewmodel:MainViewModel />
    </d:Window.DataContext>

    <Grid Background="{utility:Theme background-3}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="48" />
            <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="36" />
            <RowDefinition Height="48" />
            <RowDefinition Height="36" />
            <RowDefinition />
        </Grid.RowDefinitions>
        <Border Grid.RowSpan="4" Grid.Column="0"
                Panel.ZIndex="98"
                Background="Black">
            <Border.Effect>
                <DropShadowEffect BlurRadius="12" Opacity="0.75" ShadowDepth="0" />
            </Border.Effect>
        </Border>

        <Grid Grid.Row="0" Grid.RowSpan="4" Grid.Column="0"
              Panel.ZIndex="99"
              Background="{utility:Theme background-1-inverse}">
            <Grid.RowDefinitions>
                <RowDefinition Height="120" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Image Width="24"
                   HorizontalAlignment="Center" VerticalAlignment="Center"
                   RenderOptions.BitmapScalingMode="HighQuality" SnapsToDevicePixels="True"
                   Source="/Rain;component/Resources/logo.png" />

            <ToolBarTray Grid.Row="1" Orientation="Vertical">
                <ToolBar VerticalAlignment="Stretch">
                    <RadioButton GroupName="selectedTool"
                                 IsChecked="{Binding ToolManager.Type, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static coremodel:ToolType.Select}, Mode=TwoWay}"
                                 Style="{StaticResource ToolbarButton}" ToolTip="Select">
                        <control:Icon IconName="tool-select" Inverted="True" />
                    </RadioButton>
                    <RadioButton GroupName="selectedTool"
                                 IsChecked="{Binding ToolManager.Type, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static coremodel:ToolType.Node}, Mode=TwoWay}"
                                 Style="{StaticResource ToolbarButton}" ToolTip="Node">
                        <control:Icon IconName="tool-node" Inverted="True" />
                    </RadioButton>
                    <RadioButton GroupName="selectedTool"
                                 IsChecked="{Binding ToolManager.Type, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static coremodel:ToolType.Pencil}, Mode=TwoWay}"
                                 Style="{StaticResource ToolbarButton}" ToolTip="Pencil">
                        <control:Icon IconName="tool-pencil" Inverted="True" />
                    </RadioButton>
                    <RadioButton GroupName="selectedTool" IsEnabled="False" Style="{StaticResource ToolbarButton}"
                                 ToolTip="Pen">
                        <control:Icon IconName="tool-pen" Inverted="True" />
                    </RadioButton>
                    <RadioButton GroupName="selectedTool"
                                 IsChecked="{Binding ToolManager.Type, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static coremodel:ToolType.Text}, Mode=TwoWay}"
                                 Style="{StaticResource ToolbarButton}" ToolTip="Text">
                        <control:Icon IconName="tool-text" Inverted="True" />
                    </RadioButton>
                    <RadioButton GroupName="selectedTool" IsEnabled="False" Style="{StaticResource ToolbarButton}"
                                 ToolTip="Color Picker">
                        <control:Icon IconName="tool-eyedropper" Inverted="True" />
                    </RadioButton>
                    <RadioButton GroupName="selectedTool" IsEnabled="False" Style="{StaticResource ToolbarButton}"
                                 ToolTip="Flood">
                        <control:Icon IconName="tool-flood" Inverted="True" />
                    </RadioButton>
                    <RadioButton GroupName="selectedTool"
                                 IsChecked="{Binding ToolManager.Type, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static coremodel:ToolType.Gradient}, Mode=TwoWay}"
                                 Style="{StaticResource ToolbarButton}" ToolTip="Gradient">
                        <control:Icon IconName="tool-gradient" Inverted="True" />
                    </RadioButton>
                    <RadioButton GroupName="selectedTool" IsEnabled="False" Style="{StaticResource ToolbarButton}"
                                 ToolTip="Keyframe">
                        <control:Icon IconName="tool-keyframe" Inverted="True" />
                    </RadioButton>
                    <RadioButton GroupName="selectedTool" IsEnabled="False" Style="{StaticResource ToolbarButton}"
                                 ToolTip="Mask">
                        <control:Icon IconName="tool-mask" Inverted="True" />
                    </RadioButton>
                    <RadioButton GroupName="selectedTool" IsEnabled="False" Style="{StaticResource ToolbarButton}"
                                 ToolTip="Zoom">
                        <control:Icon IconName="tool-zoom" Inverted="True" />
                    </RadioButton>
                </ToolBar>
            </ToolBarTray>
        </Grid>

        <Border Grid.Row="0" Grid.Column="1"
                Background="{utility:Theme background-2}">
            <Grid UseLayoutRounding="True">
                <Menu Margin="18,0,0,0" VerticalAlignment="Center"
                      Background="Transparent" ItemsSource="{Binding MenuItems}" WindowChrome.IsHitTestVisibleInChrome="True">
                    <Menu.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}">
                            <Setter Property="Command" Value="{Binding Command}" />
                            <Setter Property="CommandParameter" Value="{Binding ArtContext}" />
                            <Setter Property="FontSize" Value="12" />
                            <Setter Property="InputGestureText" Value="{Binding Shortcut}" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Type}" Value="{x:Static viewmodel:MenuItemType.Separator}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Separator Margin="0,4"
                                                           BorderBrush="{utility:Theme divider}" BorderThickness="1" Opacity="0.25" />
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Menu.ItemContainerStyle>
                    <Menu.ItemTemplate>
                        <HierarchicalDataTemplate DataType="{x:Type viewmodel:MenuItem}" ItemsSource="{Binding Path=SubMenus}">
                            <Grid>
                                <TextBlock Text="{Binding Name}" />
                            </Grid>
                        </HierarchicalDataTemplate>
                    </Menu.ItemTemplate>
                </Menu>
                <StackPanel HorizontalAlignment="Right"
                            Orientation="Horizontal" WindowChrome.IsHitTestVisibleInChrome="True">
                    <Button Height="30"
                            Padding="12,6"
                            Command="{x:Static SystemCommands.MinimizeWindowCommand}" Style="{StaticResource ToolbarButton}">
                        <control:Icon IconName="icon-minimize" />
                    </Button>
                    <Button Height="30"
                            Padding="12,6"
                            Command="{x:Static SystemCommands.RestoreWindowCommand}" Style="{StaticResource ToolbarButton}">
                        <control:Icon IconName="icon-restore" />
                    </Button>
                    <Button Height="30"
                            Padding="12,6"
                            Command="{x:Static SystemCommands.CloseWindowCommand}" Style="{StaticResource ToolbarButton}">
                        <control:Icon IconName="icon-close" />
                    </Button>
                </StackPanel>
            </Grid>
        </Border>
        <Border Grid.Row="1" Grid.Column="1"
                Background="{utility:Theme background-1}">
            <ToolBar Margin="12,0,0,0" ItemsSource="{Binding ToolbarItems}">
                <ToolBar.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                </ToolBar.ItemsPanel>
                <ToolBar.ItemTemplateSelector>
                    <utility:EnumDataTemplateSelector PropertyName="Type" />
                </ToolBar.ItemTemplateSelector>
                <ToolBar.Resources>
                    <DataTemplate x:Key="{x:Static viewmodel:ToolbarItemType.Button}">
                        <Button Command="{Binding Command}" CommandParameter="{Binding ArtContext}" Style="{StaticResource ToolbarButton}"
                                ToolTip="{Binding Name}">
                            <control:Icon IconName="{Binding Icon}" />
                        </Button>
                    </DataTemplate>

                    <DataTemplate x:Key="{x:Static viewmodel:ToolbarItemType.Space}">
                        <Border Width="50" />
                    </DataTemplate>
                </ToolBar.Resources>
            </ToolBar>
        </Border>
        <Separator Grid.Row="1" Grid.Column="1"
                   Margin="0" VerticalAlignment="Bottom"
                   BorderBrush="{utility:Theme divider}" BorderThickness="1" />
        <Border Grid.Row="2" Grid.Column="1">
            <DockPanel>
                <TextBlock Margin="24,0" VerticalAlignment="Center"
                           DockPanel.Dock="Left" FontWeight="Bold" Text="{Binding ToolManager.Tool.Type}" />
                <ItemsControl utility:Helper.Accent="{utility:Theme color(accent-4-inverse)}" ItemsSource="{Binding ToolManager.Tool.Options}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplateSelector>
                        <utility:EnumDataTemplateSelector PropertyName="Type">
                            <DataTemplate x:Key="{x:Static coremodel:ToolOptionType.Dropdown}" DataType="{x:Type core:ToolOption`1}">
                                <StackPanel Margin="8,0" Orientation="Horizontal">
                                    <TextBlock VerticalAlignment="Center">
                                        <Run Text="{Binding Label}" /><Run Text=":" />
                                    </TextBlock>
                                    <ComboBox Margin="8,0"
                                              utility:Helper.Accent="{utility:Theme color(accent-4)}" ItemsSource="{Binding Values}"
                                              SelectedValue="{Binding Value}">
                                        <ComboBox.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <VirtualizingStackPanel />
                                            </ItemsPanelTemplate>
                                        </ComboBox.ItemsPanel>
                                    </ComboBox>
                                </StackPanel>
                            </DataTemplate>
                            <DataTemplate x:Key="{x:Static coremodel:ToolOptionType.Segment}" DataType="{x:Type core:ToolOption`1}">
                                <StackPanel Margin="16,0" Orientation="Horizontal">
                                    <TextBlock VerticalAlignment="Center">
                                        <Run Text="{Binding Label}" /><Run Text=":" />
                                    </TextBlock>
                                    <control:SegmentButton Margin="8,0"
                                                           utility:Helper.Accent="{utility:Theme color(accent-4)}" ItemsSource="{Binding Values}"
                                                           SelectedValue="{Binding Value}" />
                                </StackPanel>
                            </DataTemplate>
                            <DataTemplate x:Key="{x:Static coremodel:ToolOptionType.Font}" DataType="{x:Type core:ToolOption`1}">
                                <StackPanel Margin="8,0" Orientation="Horizontal">
                                    <TextBlock VerticalAlignment="Center">
                                        <Run Text="{Binding Label}" /><Run Text=":" />
                                    </TextBlock>
                                    <ComboBox Margin="8,0"
                                              utility:Helper.Accent="{utility:Theme color(accent-4)}" ItemsSource="{Binding Values}"
                                              SelectedValue="{Binding Value}">
                                        <ComboBox.ItemTemplate>
                                            <DataTemplate>
                                                <TextBlock FontFamily="{Binding}" Text="{Binding}" />
                                            </DataTemplate>
                                        </ComboBox.ItemTemplate>
                                        <ComboBox.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <VirtualizingStackPanel />
                                            </ItemsPanelTemplate>
                                        </ComboBox.ItemsPanel>
                                    </ComboBox>
                                </StackPanel>
                            </DataTemplate>
                            <DataTemplate x:Key="{x:Static coremodel:ToolOptionType.Length}" DataType="{x:Type core:ToolOption`1}">
                                <StackPanel Margin="16,0" Orientation="Horizontal">
                                    <TextBlock VerticalAlignment="Center">
                                        <Run Text="{Binding Label}" /><Run Text=":" />
                                    </TextBlock>
                                    <ComboBox x:Name="Dropdown"
                                              Margin="8,0"
                                              IsEditable="True" ItemsSource="{Binding Values}">
                                        <ComboBox.Text>
                                            <MultiBinding Converter="{StaticResource PointConverter}" UpdateSourceTrigger="LostFocus">
                                                <Binding Path="Value" />
                                                <Binding Mode="OneWay" Path="Unit" />
                                            </MultiBinding>
                                        </ComboBox.Text>
                                    </ComboBox>
                                </StackPanel>
                            </DataTemplate>
                            <DataTemplate x:Key="{x:Static coremodel:ToolOptionType.Button}" DataType="{x:Type core:ToolOption`1}">
                                <Button Margin="4" Padding="8,0"
                                        DataContext="{Binding}">
                                    <Button.Resources>
                                        <utility:BindingProxy x:Key="hack" Data="{Binding}" />
                                    </Button.Resources>
                                    <Button.Command>
                                        <viewmodel:BindableDelegateCommand Action="{Binding Data.Value, Mode=OneWay, Source={StaticResource hack}}" />
                                    </Button.Command>
                                    <StackPanel Orientation="Horizontal">
                                        <control:Icon Width="12" Height="12"
                                                      Margin="4,0"
                                                      IconName="{Binding Icon}" />
                                        <TextBlock Text="{Binding Label}" />
                                    </StackPanel>
                                </Button>
                            </DataTemplate>
                        </utility:EnumDataTemplateSelector>
                    </ItemsControl.ItemTemplateSelector>
                </ItemsControl>
            </DockPanel>
        </Border>
        <Grid Grid.Row="3" Grid.Column="1">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="384" />
            </Grid.ColumnDefinitions>
            <TabControl Background="Transparent">
                <TabItem Background="White">
                    <control:ArtView x:Name="ArtView" AllowDrop="True" />
                </TabItem>
            </TabControl>
            <GridSplitter Grid.Row="0" Grid.Column="1"
                          Width="5"
                          Background="Transparent" />
            <Grid Grid.Row="0" Grid.RowSpan="2" Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TabControl utility:Helper.Accent="{utility:Theme color(accent-2-inverse)}">
                    <control:Pane DataContext="{Binding ColorViewModel}" Header="Fill" Source="Rain;component/View/Panes/ColorPane.xaml" />
                    <TabItem Header="Swatches" />
                    <TabItem Header="Stroke">
                        <Grid Background="{utility:Theme background-2}">
                            <Grid Margin="8">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>

                                <TextBlock Margin="16,8,16,0" HorizontalAlignment="Center" VerticalAlignment="Center"
                                           DockPanel.Dock="Left" Text="Width:" />

                                <TextBox Grid.Row="0" Grid.Column="1"
                                         Margin="4" HorizontalContentAlignment="Center"
                                         Text="{Binding StrokeViewModel.Width, Mode=TwoWay, Converter={StaticResource DistanceConverter}}">
                                    <i:Interaction.Behaviors>
                                        <utility:TextBoxEnterBehavior />
                                    </i:Interaction.Behaviors>
                                </TextBox>

                                <TextBlock Grid.Row="0" Grid.Column="2"
                                           Margin="16,4" HorizontalAlignment="Center" VerticalAlignment="Center"
                                           DockPanel.Dock="Left" Text="Style:" />

                                <control:SegmentButton Grid.Row="0" Grid.Column="3"
                                                       Margin="4"
                                                       SelectedValue="{Binding StrokeViewModel.HasDashes, Mode=TwoWay}">
                                    <control:Segment ToolTip="No Dashes">
                                        <control:Segment.Value>
                                            <sys:Boolean>False</sys:Boolean>
                                        </control:Segment.Value>
                                        <control:Icon IconName="icon-stroke-solid" />
                                    </control:Segment>
                                    <control:Segment ToolTip="Dashes">
                                        <control:Segment.Value>
                                            <sys:Boolean>True</sys:Boolean>
                                        </control:Segment.Value>
                                        <control:Icon IconName="icon-stroke-dash" />
                                    </control:Segment>
                                </control:SegmentButton>

                                <TextBlock Grid.Row="1" Grid.Column="0"
                                           Margin="16,4" HorizontalAlignment="Center" VerticalAlignment="Center"
                                           DockPanel.Dock="Left" Text="End:" />

                                <control:SegmentButton Grid.Row="1" Grid.Column="1"
                                                       Margin="4"
                                                       SelectedValue="{Binding StrokeViewModel.LineCap, Mode=TwoWay}">
                                    <control:Segment ToolTip="Flat" Value="{x:Static coremodel:LineCap.Butt}">
                                        <control:Icon IconName="icon-end-flat" />
                                    </control:Segment>
                                    <control:Segment ToolTip="Round" Value="{x:Static coremodel:LineCap.Round}">
                                        <control:Icon IconName="icon-end-round" />
                                    </control:Segment>
                                    <control:Segment ToolTip="Square" Value="{x:Static coremodel:LineCap.Square}">
                                        <control:Icon IconName="icon-end-square" />
                                    </control:Segment>
                                </control:SegmentButton>

                                <TextBlock Grid.Row="1" Grid.Column="2"
                                           Margin="16,4" HorizontalAlignment="Center" VerticalAlignment="Center"
                                           DockPanel.Dock="Left" Text="Corner:" />

                                <control:SegmentButton Grid.Row="1" Grid.Column="3"
                                                       Margin="4"
                                                       SelectedValue="{Binding StrokeViewModel.LineJoin, Mode=TwoWay}">
                                    <control:Segment ToolTip="Miter" Value="{x:Static coremodel:LineJoin.Miter}">
                                        <control:Icon IconName="icon-corner-miter" />
                                    </control:Segment>
                                    <control:Segment ToolTip="Bevel" Value="{x:Static coremodel:LineJoin.Bevel}">
                                        <control:Icon IconName="icon-corner-bevel" />
                                    </control:Segment>
                                    <control:Segment ToolTip="Round" Value="{x:Static coremodel:LineJoin.Round}">
                                        <control:Icon IconName="icon-corner-round" />
                                    </control:Segment>
                                </control:SegmentButton>

                                <TextBlock Grid.Row="2" Grid.Column="0"
                                           Margin="16,4" HorizontalAlignment="Center" VerticalAlignment="Center"
                                           DockPanel.Dock="Left" Text="Miter:" />

                                <TextBox Grid.Row="2" Grid.Column="1"
                                         Margin="4" HorizontalContentAlignment="Center"
                                         Text="{Binding StrokeViewModel.MiterLimit, Mode=TwoWay, Converter={StaticResource DistanceConverter}}">
                                    <i:Interaction.Behaviors>
                                        <utility:TextBoxEnterBehavior />
                                    </i:Interaction.Behaviors>
                                </TextBox>

                                <TextBlock Grid.Row="3" Grid.Column="0"
                                           Margin="16,4" HorizontalAlignment="Center" VerticalAlignment="Center"
                                           DockPanel.Dock="Left" Text="Dashes:" />

                                <UniformGrid Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="3"
                                             Margin="0,4"
                                             Columns="4">
                                    <TextBox Margin="4,0" Text="{Binding StrokeViewModel.Dashes[0], Mode=TwoWay}">
                                        <i:Interaction.Behaviors>
                                            <utility:TextBoxEnterBehavior />
                                        </i:Interaction.Behaviors>
                                    </TextBox>
                                    <TextBox Margin="4,0" Text="{Binding StrokeViewModel.Dashes[1], Mode=TwoWay}">
                                        <i:Interaction.Behaviors>
                                            <utility:TextBoxEnterBehavior />
                                        </i:Interaction.Behaviors>
                                    </TextBox>
                                    <TextBox Margin="4,0" Text="{Binding StrokeViewModel.Dashes[2], Mode=TwoWay}">
                                        <i:Interaction.Behaviors>
                                            <utility:TextBoxEnterBehavior />
                                        </i:Interaction.Behaviors>
                                    </TextBox>
                                    <TextBox Margin="4,0" Text="{Binding StrokeViewModel.Dashes[3], Mode=TwoWay}">
                                        <i:Interaction.Behaviors>
                                            <utility:TextBoxEnterBehavior />
                                        </i:Interaction.Behaviors>
                                    </TextBox>
                                </UniformGrid>
                            </Grid>
                        </Grid>
                    </TabItem>
                </TabControl>
                <TabControl Grid.Row="1" utility:Helper.Accent="{utility:Theme color(accent-1-inverse)}">
                    <TabItem Header="Layers">
                        <TreeView x:Name="LayerTree"
                                  Padding="0"
                                  Background="{utility:Theme background-3}" BorderThickness="0"
                                  ItemsSource="{Binding ViewManager.Root.SubLayers}">
                            <TreeView.Resources>
                                <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
                                    <Setter Property="Focusable" Value="False" />
                                    <Setter Property="Height" Value="12" />
                                    <Setter Property="Margin" Value="0" />
                                    <Setter Property="Padding" Value="0" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Border Width="12" Height="12"
                                                        Background="Transparent">
                                                    <control:Icon x:Name="ExpandPath"
                                                                  Width="12" Height="12"
                                                                  Cursor="Hand" IconName="icon-expander" RenderTransformOrigin="0.5,0.5">
                                                        <control:Icon.RenderTransform>
                                                            <RotateTransform Angle="-90" />
                                                        </control:Icon.RenderTransform>
                                                    </control:Icon>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Setter TargetName="ExpandPath" Property="RenderTransform">
                                                            <Setter.Value>
                                                                <RotateTransform Angle="-45" />
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Width" Value="12" />
                                </Style>

                                <DataTemplate DataType="{x:Type documentGraph:ILayer}">
                                    <TextBlock x:Name="layerName"
                                               FontWeight="Bold" Text="{Binding Name}" />
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding Name}" Value="{x:Null}">
                                            <Setter TargetName="layerName" Property="FontWeight" Value="Normal" />
                                            <Setter TargetName="layerName" Property="Text" Value="{Binding DefaultName, StringFormat=(\{0\})}" />
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </TreeView.Resources>
                            <TreeView.ItemTemplate>
                                <HierarchicalDataTemplate DataType="{x:Type documentGraph:IContainerLayer}" ItemsSource="{Binding SubLayers}">
                                    <TextBlock x:Name="layerName"
                                               FontWeight="Bold" Text="{Binding Name}" />
                                    <HierarchicalDataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding Name}" Value="{x:Null}">
                                            <Setter TargetName="layerName" Property="FontWeight" Value="Normal" />
                                            <Setter TargetName="layerName" Property="Text" Value="{Binding DefaultName, StringFormat=(\{0\})}" />
                                        </DataTrigger>
                                    </HierarchicalDataTemplate.Triggers>
                                </HierarchicalDataTemplate>
                            </TreeView.ItemTemplate>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="SelectedItemChanged">
                                    <i:InvokeCommandAction Command="{Binding SelectLayerCommand, Mode=OneWay}" CommandParameter="{Binding SelectedValue, ElementName=LayerTree, Mode=OneWay}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <TreeView.ItemContainerStyle>
                                <Style TargetType="{x:Type TreeViewItem}">
                                    <Setter Property="Background" Value="{utility:Theme background-2}" />
                                    <Setter Property="Foreground" Value="{utility:Theme text-1}" />
                                    <Setter Property="HorizontalContentAlignment" Value="Left" />
                                    <Setter Property="Padding" Value="0,10,0,0" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type TreeViewItem}">
                                                <Border x:Name="Bd"
                                                        Margin="-19,0,0,0" Padding="{TemplateBinding Padding}"
                                                        Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                                        BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                                                    <Grid Margin="19,0,0,0" VerticalAlignment="Center">
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="Auto" MinWidth="19" />
                                                            <ColumnDefinition Width="*" />
                                                            <ColumnDefinition Width="19" />
                                                        </Grid.ColumnDefinitions>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="Auto" />
                                                            <RowDefinition />
                                                        </Grid.RowDefinitions>
                                                        <ToggleButton x:Name="Expander"
                                                                      ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                                                      Style="{StaticResource ExpandCollapseToggleStyle}" />

                                                        <Separator Grid.ColumnSpan="3"
                                                                   Margin="0,0,0,-10" VerticalAlignment="Bottom" />

                                                        <ContentPresenter x:Name="PART_Header"
                                                                          Grid.Column="1"
                                                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                          ContentSource="Header" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                                        <CheckBox Grid.Column="2"
                                                                  HorizontalAlignment="Right"
                                                                  IsChecked="{Binding Visible}" />

                                                        <ItemsPresenter x:Name="ItemsHost"
                                                                        Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2"
                                                                        Margin="0,10,0,0" />

                                                    </Grid>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsExpanded" Value="false">
                                                        <Setter Property="Padding" Value="0,10" />
                                                        <Setter TargetName="ItemsHost" Property="Margin" Value="0" />
                                                        <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                                                    </Trigger>
                                                    <Trigger Property="HasItems" Value="false">
                                                        <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                                                    </Trigger>
                                                    <DataTrigger Binding="{Binding Selected}" Value="true">
                                                        <Setter TargetName="Bd" Property="Background" Value="{utility:Theme background-1}" />
                                                    </DataTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                                    <Style.Triggers>
                                        <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                                            <Setter Property="ItemsPanel">
                                                <Setter.Value>
                                                    <ItemsPanelTemplate>
                                                        <VirtualizingStackPanel />
                                                    </ItemsPanelTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </TreeView.ItemContainerStyle>
                            <!--<i:Interaction.Behaviors>
                                    <view:TreeViewMultipleSelectionBehavior SelectedItems="{Binding Selection}" />
                                </i:Interaction.Behaviors>-->
                        </TreeView>
                    </TabItem>
                    <TabItem Header="Effects" />
                </TabControl>
                <TabControl Grid.Row="2" utility:Helper.Accent="{utility:Theme color(accent-3-inverse)}">
                    <control:Pane DataContext="{Binding TransformViewModel}" Header="Transform"
                                  Source="Rain;component/View/Panes/TransformPane.xaml" />

                    <control:Pane DataContext="{Binding HistoryManager}" Header="History" Source="Rain;component/View/Panes/HistoryPane.xaml" />
                </TabControl>
            </Grid>
            <StatusBar Grid.Row="1" Grid.Column="0"
                       Height="25"
                       HorizontalContentAlignment="Stretch">
                <StatusBar.Background>
                    <SolidColorBrush x:Name="StatusBarBackground" Opacity="0.25" />
                </StatusBar.Background>
                <StatusBar.Style>
                    <Style BasedOn="{StaticResource {x:Type StatusBar}}" TargetType="StatusBar">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ArtContext.Status.Type}" Value="Error">
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard Storyboard.Target="{x:Reference StatusBarBackground}" Storyboard.TargetProperty="Color">
                                            <ColorAnimation To="{utility:Theme color(accent-error)}" Duration="0:0:0.125" />
                                            <ColorAnimation To="Transparent" Duration="0:0:2.5" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </DataTrigger.EnterActions>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ArtContext.Status.Type}" Value="Warning">
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard Storyboard.Target="{x:Reference StatusBarBackground}" Storyboard.TargetProperty="Color">
                                            <ColorAnimation To="{utility:Theme color(accent-error)}" Duration="0:0:0.125" />
                                            <ColorAnimation To="Transparent" Duration="0:0:2.5" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </DataTrigger.EnterActions>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ArtContext.Status.Type}" Value="Success">
                                <DataTrigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard Storyboard.Target="{x:Reference StatusBarBackground}" Storyboard.TargetProperty="Color">
                                            <ColorAnimation To="{utility:Theme color(accent-success)}" Duration="0:0:0.125" />
                                            <ColorAnimation To="Transparent" Duration="0:0:2.5">
                                                <ColorAnimation.EasingFunction>
                                                    <QuarticEase EasingMode="EaseIn" />
                                                </ColorAnimation.EasingFunction>
                                            </ColorAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </DataTrigger.EnterActions>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </StatusBar.Style>
                <DockPanel HorizontalAlignment="Stretch">
                    <TextBlock utility:TextBlockHelper.FormattedText="{Binding ArtContext.Status.Message, Mode=OneWay}" DockPanel.Dock="Left">
                        <TextBlock.Style>
                            <Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ArtContext.Status.Type}" Value="Info">
                                        <Setter Property="Foreground" Value="{utility:Theme text-1}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ArtContext.Status.Type}" Value="Error">
                                        <Setter Property="FontWeight" Value="SemiBold" />
                                        <Setter Property="Foreground" Value="{utility:Theme accent-error}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ArtContext.Status.Type}" Value="Warning">
                                        <Setter Property="Foreground" Value="{utility:Theme accent-error}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ArtContext.Status.Type}" Value="Success">
                                        <Setter Property="FontWeight" Value="SemiBold" />
                                        <Setter Property="Foreground" Value="{utility:Theme accent-success}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>

                    <TextBlock Margin="16,0" HorizontalAlignment="Right"
                               DockPanel.Dock="Right" Text="{Binding FrameTime, ElementName=ArtView, StringFormat=Frame Time: {0:F2}ms}" />
                </DockPanel>
            </StatusBar>
        </Grid>
    </Grid>
</Window>